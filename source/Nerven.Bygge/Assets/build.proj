<?xml version="1.0" encoding="utf-8"?>
<Project
  ToolsVersion="12.0"
  InitialTargets="EchoEnvironment"
  DefaultTargets="Complete"
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <NervenConfiguration
      Condition="$(NervenConfiguration) == '' OR $(NervenConfiguration) == '*Undefined*'">$(Configuration)</NervenConfiguration>
    <NervenConfiguration
      Condition="$(NervenConfiguration) == '' OR $(NervenConfiguration) == '*Undefined*'">Release</NervenConfiguration>
    <NervenPlatform
      Condition="$(NervenPlatform) == '' OR $(NervenPlatform) == '*Undefined*'">$(Platform)</NervenPlatform>
    <NervenPlatform
      Condition="$(NervenPlatform) == '' OR $(NervenPlatform) == '*Undefined*'">Any CPU</NervenPlatform>
    <NervenPlatformForNuget
      Condition="($(NervenPlatformForNuget) == '' OR $(NervenPlatformForNuget) == '*Undefined*') AND $(NervenPlatform) == 'Any CPU'">AnyCPU</NervenPlatformForNuget>
    <NervenPlatformForNuget
      Condition="$(NervenPlatformForNuget) == '' OR $(NervenPlatformForNuget) == '*Undefined*'">$(NervenPlatform)</NervenPlatformForNuget>
    <NervenSolutionDir
      Condition="$(NervenSolutionDir) == '' OR $(NervenSolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)</NervenSolutionDir>
    <NervenSolutionName
      Condition="$(NervenSolutionName) == '' OR $(NervenSolutionName) == '*Undefined*'">$(MSBuildProjectName)</NervenSolutionName>
    <NervenSolutionFile
      Condition="$(NervenSolutionFile) == '' OR $(NervenSolutionFile) == '*Undefined*'">$(NervenSolutionDir)\$(NervenSolutionName).sln</NervenSolutionFile>
    <NervenSolutionVersion
      Condition="$(NervenSolutionVersion) == '' OR $(NervenSolutionVersion) == '*Undefined*'">0.0.0</NervenSolutionVersion>
    <NervenSolutionAssemblyVersion
      Condition="$(NervenSolutionAssemblyVersion) == '' OR $(NervenSolutionAssemblyVersion) == '*Undefined*'">auto</NervenSolutionAssemblyVersion>
    <NervenNuGetExe
      Condition="$(NervenNuGetExe) == '' OR $(NervenNuGetExe) == '*Undefined*'">$(NuGetToolPath)</NervenNuGetExe>
    <NervenNuGetExe
      Condition="$(NervenNuGetExe) == '' OR $(NervenNuGetExe) == '*Undefined*'">$(NervenSolutionDir)\packages\NuGet.exe</NervenNuGetExe>
    <NervenTestAssembliesInclude
      Condition="$(NervenTestAssembliesInclude) == '' OR $(NervenTestAssembliesInclude) == '*Undefined*'">$(NervenSolutionDir)\tests\**\bin\$(NervenConfiguration)\$(NervenSolutionName).Tests*.dll</NervenTestAssembliesInclude>
    <NervenInstallByggeNugetPackageCommand
      Condition="$(NervenInstallByggeNugetPackageCommand) == '' OR $(NervenInstallByggeNugetPackageCommand) == '*Undefined*'">&quot;$(NervenNuGetExe)&quot; install Nerven.Bygge -pre -outputdirectory &quot;$(NervenSolutionDir)\packages&quot;</NervenInstallByggeNugetPackageCommand>
    <NervenInstallXunitNugetPackageCommand
      Condition="$(NervenInstallXunitNugetPackageCommand) == '' OR $(NervenInstallXunitNugetPackageCommand) == '*Undefined*'">&quot;$(NervenNuGetExe)&quot; install xunit.runner.msbuild -outputdirectory &quot;$(NervenSolutionDir)\packages&quot;</NervenInstallXunitNugetPackageCommand>
  </PropertyGroup>
  <ItemGroup>
    <NervenXunitMsbuildRunnerTaskPath
      Include="$(NervenSolutionDir)\packages\xunit.runner.msbuild.*\build\*\xunit.runner.msbuild.dll" />
  </ItemGroup>
  <UsingTask
    Condition="Exists('@(NervenXunitMsbuildRunnerTaskPath)')"
    TaskName="Xunit.Runner.MSBuild.xunit"
    AssemblyFile="@(NervenXunitMsbuildRunnerTaskPath)" />
  <!-- Inline task to bootstrap the build to enable downloading nuget.exe -->
  <!-- from https://github.com/Microsoft/msbuild/blob/master/dir.targets -->
  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <Address ParameterType="System.String" Required="true"/>
      <FileName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = System.IO.Path.GetDirectoryName(FileName);
            Directory.CreateDirectory(directory);
            var tempFile = Path.Combine(directory, Path.GetRandomFileName());
            var client = new System.Net.WebClient();
            client.Proxy = System.Net.WebRequest.DefaultWebProxy;
            client.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            client.DownloadFile(Address, tempFile);
            try
            {
                if (!File.Exists(FileName))
                    File.Move(tempFile, FileName);
            }
            finally
            {
                if (File.Exists(tempFile))
                    File.Delete(tempFile);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="GetAssemblyVersionFromBuildVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <BuildVersion ParameterType="System.String" Required="true"/>
      <AssemblyVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var buildVersion = (BuildVersion ?? string.Empty);
            var majorEndsPosition = buildVersion.IndexOf('.');
            var majorString = majorEndsPosition == -1 ? buildVersion : buildVersion.Substring(0, majorEndsPosition);
            int major;
            if (string.IsNullOrEmpty(majorString) || !int.TryParse(majorString, out major)) {
                major = 0;
            }

            AssemblyVersion = new Version(major, 0, 0, 0).ToString();
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="PatchAssemblyInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <AssemblyVersion ParameterType="System.String" Required="true"/>
      <FileName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
      <Reference Include="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var lines = File
                .ReadAllLines(FileName)
                .Where(line => !line.Replace(" ", "").StartsWith("[assembly:AssemblyInfo(", StringComparison.Ordinal))
                .ToList();
            lines.Add("[assembly: AssemblyVersion(\"" + AssemblyVersion + "\")]");
            File.WriteAllLines(FileName, lines.ToArray());
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="EchoEnvironment">
    <Message Text="NervenConfiguration: $(NervenConfiguration);" />
    <Message Text="NervenPlatform: $(NervenPlatform);" />
    <Message Text="NervenPlatformForNuget: $(NervenPlatformForNuget);" />
    <Message Text="NervenSolutionDir: $(NervenSolutionDir);" />
    <Message Text="NervenSolutionName: $(NervenSolutionName);" />
    <Message Text="NervenSolutionFile: $(NervenSolutionFile);" />
    <Message Text="NervenSolutionVersion: $(NervenSolutionVersion);" />
    <Message Text="NervenSolutionAssemblyVersion: $(NervenSolutionAssemblyVersion);" />
    <Message Text="NervenNuGetExe: $(NervenNuGetExe);" />
    <Message Text="NervenTestAssembliesInclude: $(NervenTestAssembliesInclude);" />
    <Message Text="NervenInstallByggeNugetPackageCommand: $(NervenInstallByggeNugetPackageCommand);" />
    <Message Text="NervenInstallXunitNugetPackageCommand: $(NervenInstallXunitNugetPackageCommand);" />
  </Target>
  <Target Name="RestoreNuget">
    <DownloadFile
      Condition="!Exists('$(NervenNuGetExe)')"
      FileName="$(NervenNuGetExe)"
      Address="https://nuget.org/nuget.exe" />
    <Exec
      Command="$(NervenInstallByggeNugetPackageCommand)" />
    <Exec
      Command="$(NervenInstallXunitNugetPackageCommand)" />
    <Exec
      Command="&quot;$(NervenNuGetExe)&quot; restore &quot;$(NervenSolutionFile)&quot;" />
  </Target>
  <Target Name="ResetBygge"
    DependsOnTargets="ExtendedClean;RestoreNuget">
    <ItemGroup>
      <NervenByggeBuildProj
        Condition="$(NervenByggeVersion) == 'auto'"
        Include="$(NervenSolutionDir)\packages\Nerven.Bygge.*\build\bygge.proj" />
      <NervenByggeBuildProj
        Condition="$(NervenByggeVersion) != 'auto'"
        Include="$(NervenSolutionDir)\packages\Nerven.Bygge.$(NervenByggeVersion)\build\bygge.proj" />
    </ItemGroup>
    <Error
      Condition="'@(NervenByggeBuildProj->Count())' != 1"
      Text="Ambiguous NervenByggeBuildProj (found @(NervenByggeBuildProj->Count()) matches)." />
    <MSBuild
      Projects="@(NervenByggeBuildProj)"
      Targets="Reset"
      Properties="NervenSolutionDir=$(NervenSolutionDir);NervenSolutionFile=$(NervenSolutionFile)" />
  </Target>
  <Target Name="PatchAssemblyInfos">
    <ItemGroup>
      <NervenPatchAssemblyInfoBakRawFiles Include="$(NervenSolutionDir)\source\**\Properties\AssemblyInfo.cs.bak" />
      <NervenPatchAssemblyInfoBakRawFiles Include="$(NervenSolutionDir)\tests\**\Properties\AssemblyInfo.cs.bak" />
      <NervenPatchAssemblyInfoBakFiles Include="@(NervenPatchAssemblyInfoBakRawFiles)">
        <OriginalFile>%(RootDir)%(Directory)%(Filename)</OriginalFile>
        <BackupFile>%(FullPath)</BackupFile>
      </NervenPatchAssemblyInfoBakFiles>
      <NervenPatchAssemblyInfoRawFiles Include="$(NervenSolutionDir)\source\**\Properties\AssemblyInfo.cs" />
      <NervenPatchAssemblyInfoRawFiles Include="$(NervenSolutionDir)\tests\**\Properties\AssemblyInfo.cs" />
      <NervenPatchAssemblyInfoFiles Include="@(NervenPatchAssemblyInfoRawFiles)">
        <OriginalFile>%(FullPath)</OriginalFile>
        <BackupFile>%(RootDir)%(Directory)%(Filename).cs.bak</BackupFile>
      </NervenPatchAssemblyInfoFiles>
    </ItemGroup>
    <GetAssemblyVersionFromBuildVersion
      Condition="$(NervenSolutionAssemblyVersion) == 'auto'"
      BuildVersion="$(NervenSolutionVersion)">
      <Output PropertyName="NervenSolutionAssemblyVersion" TaskParameter="AssemblyVersion" />
    </GetAssemblyVersionFromBuildVersion>
    <Move
      Condition="Exists('%(NervenPatchAssemblyInfoBakFiles.BackupFile)')"
      SourceFiles="@(NervenPatchAssemblyInfoBakFiles)"
      DestinationFiles="%(NervenPatchAssemblyInfoBakFiles.OriginalFile)" />
    <Copy
      Condition="Exists('%(NervenPatchAssemblyInfoFiles.OriginalFile)')"
      SourceFiles="@(NervenPatchAssemblyInfoFiles)"
      DestinationFiles="%(NervenPatchAssemblyInfoFiles.BackupFile)" />
    <PatchAssemblyInfo
      Condition="Exists('%(NervenPatchAssemblyInfoFiles.OriginalFile)')"
      AssemblyVersion="$(NervenSolutionAssemblyVersion)"
      FileName="%(NervenPatchAssemblyInfoFiles.OriginalFile)" />
  </Target>
  <Target Name="RevertAssemblyInfoPatches">
    <ItemGroup>
      <NervenRevertAssemblyInfoPatchRawFiles Include="$(NervenSolutionDir)\source\**\Properties\AssemblyInfo.cs.bak" />
      <NervenRevertAssemblyInfoPatchRawFiles Include="$(NervenSolutionDir)\tests\**\Properties\AssemblyInfo.cs.bak" />
      <NervenRevertAssemblyInfoPatchFiles Include="@(NervenRevertAssemblyInfoPatchRawFiles)">
        <OriginalFile>%(RootDir)%(Directory)%(Filename)</OriginalFile>
        <BackupFile>%(FullPath)</BackupFile>
      </NervenRevertAssemblyInfoPatchFiles>
    </ItemGroup>
    <Move
      Condition="Exists('%(NervenRevertAssemblyInfoPatchFiles.BackupFile)')"
      SourceFiles="@(NervenRevertAssemblyInfoPatchFiles)"
      DestinationFiles="%(NervenRevertAssemblyInfoPatchFiles.OriginalFile)" />
  </Target>
  <Target Name="Build">
    <CallTarget
      Condition="$(NervenSolutionAssemblyVersion) != ''"
      Targets="PatchAssemblyInfos"/>
    <MSBuild BuildInParallel="true"
      Projects="$(NervenSolutionFile)"
      Properties="Configuration=$(NervenConfiguration);Platform=$(NervenPlatform);RestorePackages=false;TreatWarningsAsErrors=true"
      Targets="Build" />
    <CallTarget
      Targets="RevertAssemblyInfoPatches" />
    <OnError ExecuteTargets="RevertAssemblyInfoPatches" />
  </Target>
  <Target Name="ExtendedClean">
    <RemoveDir
      Directories="$(NervenSolutionDir)\packages" />
    <MSBuild BuildInParallel="true"
      Projects="$(NervenSolutionFile)"
      Properties="Configuration=$(NervenConfiguration);Platform=$(NervenPlatform);RestorePackages=false"
      Targets="Clean" />
  </Target>
  <Target Name="Clean">
    <MSBuild BuildInParallel="true"
      Projects="$(NervenSolutionFile)"
      Properties="Configuration=$(NervenConfiguration);Platform=$(NervenPlatform);RestorePackages=false"
      Targets="Clean" />
  </Target>
  <Target Name="Rebuild"
    DependsOnTargets="Clean;RestoreNuget">
    <CallTarget
      Condition="$(NervenSolutionAssemblyVersion) != ''"
      Targets="PatchAssemblyInfos"/>
    <MSBuild BuildInParallel="true"
      Projects="$(NervenSolutionFile)"
      Properties="Configuration=$(NervenConfiguration);Platform=$(NervenPlatform);RestorePackages=false;TreatWarningsAsErrors=true"
      Targets="Rebuild" />
    <CallTarget
      Targets="RevertAssemblyInfoPatches" />
    <OnError ExecuteTargets="RevertAssemblyInfoPatches" />
  </Target>
  <Target Name="Test">
    <ItemGroup>
      <TestAssemblies
        Include="$(NervenTestAssembliesInclude)" />
    </ItemGroup>
    <MakeDir
      Condition="!Exists('$(NervenSolutionDir)\output\xunit')"
      Directories="$(NervenSolutionDir)\output\xunit" />
    <xunit
      Condition="'@(TestAssemblies->Count())' > '0'"
      Assemblies="@(TestAssemblies)"
      Xml="$(NervenSolutionDir)\output\xunit\%(TestAssemblies.Filename).xml" />
  </Target>
  <Target Name="PackNuget">
    <ItemGroup>
      <NervenNugetSpecFiles Include="$(NervenSolutionDir)\source\**\*.nuspec;" />
      <NervenNugetPackEntryFiles Include="@(NervenNugetSpecFiles)">
        <PackFile>%(FullPath)</PackFile>
        <PackFile
          Condition="Exists('%(RootDir)%(Directory)%(Filename).csproj')">%(RootDir)%(Directory)%(Filename).csproj</PackFile>
      </NervenNugetPackEntryFiles>
    </ItemGroup>
    <Message Text="NuGet pack file: %(NervenNugetPackEntryFiles.PackFile)" />
    <MakeDir
      Condition="!Exists('$(NervenSolutionDir)\output\nuget')"
      Directories="$(NervenSolutionDir)\output\nuget" />
    <Exec
      Condition="'@(NervenNugetPackEntryFiles->Count())' > '0'"
      Command="&quot;$(NervenNuGetExe)&quot; pack &quot;%(NervenNugetPackEntryFiles.PackFile)&quot; -NonInteractive -IncludeReferencedProjects -NoDefaultExcludes -Symbols -Properties &quot;Configuration=$(NervenConfiguration);Platform=$(NervenPlatformForNuget)&quot; -OutputDirectory &quot;$(NervenSolutionDir)\output\nuget\ &quot; -Version $(NervenSolutionVersion)" />
  </Target>
  <Target Name="Complete"
    DependsOnTargets="Clean;Build;Test;PackNuget" />
</Project>
